// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "recommand-chat-bot/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockMovieRepository is an autogenerated mock type for the MovieRepository type
type MockMovieRepository struct {
	mock.Mock
}

type MockMovieRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMovieRepository) EXPECT() *MockMovieRepository_Expecter {
	return &MockMovieRepository_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockMovieRepository) GetByID(ctx context.Context, id int64) (domain.Movie, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Movie, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Movie); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Movie)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMovieRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockMovieRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockMovieRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockMovieRepository_GetByID_Call {
	return &MockMovieRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockMovieRepository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockMovieRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMovieRepository_GetByID_Call) Return(_a0 domain.Movie, _a1 error) *MockMovieRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMovieRepository_GetByID_Call) RunAndReturn(run func(context.Context, int64) (domain.Movie, error)) *MockMovieRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, m
func (_m *MockMovieRepository) Store(ctx context.Context, m *domain.CreateMovieInput) (int64, error) {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateMovieInput) (int64, error)); ok {
		return rf(ctx, m)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateMovieInput) int64); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateMovieInput) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMovieRepository_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockMovieRepository_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - m *domain.CreateMovieInput
func (_e *MockMovieRepository_Expecter) Store(ctx interface{}, m interface{}) *MockMovieRepository_Store_Call {
	return &MockMovieRepository_Store_Call{Call: _e.mock.On("Store", ctx, m)}
}

func (_c *MockMovieRepository_Store_Call) Run(run func(ctx context.Context, m *domain.CreateMovieInput)) *MockMovieRepository_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.CreateMovieInput))
	})
	return _c
}

func (_c *MockMovieRepository_Store_Call) Return(_a0 int64, _a1 error) *MockMovieRepository_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMovieRepository_Store_Call) RunAndReturn(run func(context.Context, *domain.CreateMovieInput) (int64, error)) *MockMovieRepository_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMovieRepository creates a new instance of MockMovieRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMovieRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMovieRepository {
	mock := &MockMovieRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
